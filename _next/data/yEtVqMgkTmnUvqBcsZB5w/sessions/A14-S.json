{"pageProps":{"title":"sync.Mutexの仕組みを理解する","roomName":"Room A","sessionId":"A14-S","description":"syncパッケージとは相互排他ロックなどの基本的な同期プリミティブを提供するパッケージです。\r\nその中の一つにsync.Mutexというものが存在します。\r\nsync.Mutexはgoroutineの排他制御を行うための機能です。\r\nsync.Mutexの使い方やごく簡単なサンプルコードは数多く存在しますが、sync.Mutexの内部的な実装を解説した記事は現時点では2桁もありません。\r\nそこで、本セッションでは、排他制御の定義、sync packageの概要について説明した後に、sync.Mutexおよび、Lock、Unlockメソッドに着目し内部実装レベルでコードリーディングし、理解を深めていきます。\r\n理解を深めていくにあたって、次世代UNIXとして開発されていた分散OSであるPlan 9の存在は欠かせません。\r\nそこで、ベル研究所の元メンバーであり、Plan 9に携わったのち、現Goチームで開発を行うRuss Cox氏の書いたSemaphore in Plan 9の論文を参考にします。\r\n上記の論文を引用しながら、sync.Mutexの仕組みを原理原則から整理して話します。\r\nセッションの聴講者は、sync.Mutexの理解および、実装を読むにあたり必要なGoのランタイムパッケージ、スケジューラ、go:linkname ディレクティブといったGoのエコシステムの仕組みについても学ぶことができます。","sessionLevel":null,"sessionType":"Challenge Session(20min)","googleCalendarEventCreationLink":"http://www.google.com/calendar/event?action=TEMPLATE&text=sync.Mutexの仕組みを理解する&details=syncパッケージとは相互排他ロックなどの基本的な同期プリミティブを提供するパッケージです。\r\nその中の一つにsync.Mutexというものが存在します。\r\nsync.Mutexはgoroutineの排他制御を行うための機能です。\r\nsync.Mutexの使い方やごく簡単なサンプルコードは数多く存在しますが、sync.Mutexの内部的な実装を解説した記事は現時点では2桁もありません。\r\nそこで、本セッションでは、排他制御の定義、sync packageの概要について説明した後に、sync.Mutexおよび、Lock、Unlockメソッドに着目し内部実装レベルでコードリーディングし、理解を深めていきます。\r\n理解を深めていくにあたって、次世代UNIXとして開発されていた分散OSであるPlan 9の存在は欠かせません。\r\nそこで、ベル研究所の元メンバーであり、Plan 9に携わったのち、現Goチームで開発を行うRuss Cox氏の書いたSemaphore in Plan 9の論文を参考にします。\r\n上記の論文を引用しながら、sync.Mutexの仕組みを原理原則から整理して話します。\r\nセッションの聴講者は、sync.Mutexの理解および、実装を読むにあたり必要なGoのランタイムパッケージ、スケジューラ、go:linkname ディレクティブといったGoのエコシステムの仕組みについても学ぶことができます。&dates=20230602T171000/20230602T173000","speaker":{"fullName":"Yoshiki Fujikane","profilePicture":"https://sessionize.com/image/d5d0-400o400o2-HM2pYcFSDPHTRjBiThamQ3.png","bio":"2022年度新卒としてCyberAgentに入社。\r\n仕組みを知るのが好きで、よくOSSのコードを読んだりしています。","tagLine":"CyberAgent.inc","twitterUserName":"ffjlabo"}},"__N_SSG":true}