{"pageProps":{"title":"ネットワークコントローラ実装で学ぶ、Goクライアントサーバシステムの作り方","roomName":"Room B","sessionId":"B14-S","description":"Goは並行処理を簡単に実現可能な強みを持つため、複数のクライアントと同時並行かつ中央集権的に情報を交換するサーバシステムを、コードの可読性を保ったまま実装することが可能な言語です。我々は、ネットワーク分野でもこの強みを活かすことができないか試行錯誤しています。\r\n\r\nクライアントサーバシステムの例として、ネットワーク機器のパス管理を行うPCEという仕組みがあります。キャリアのように多くのルータで構成される大規模ネットワークにおいてパス管理は重要な要素ですが、誰もが手軽に試験・運用できるPCEはありませんでした。そこで我々は、Goの特性を活かしてPCEをOSSとして実装しました。その結果、誰でも手軽に試験できるようになりました。\r\n\r\n本セッションでは、Go初学者であった我々がネットワークプロトコルやサーバ機能をOSSとして実装する中で理解したことについて、公開済のコードを用いて紹介します。\r\n具体的には、\r\n- goroutine と channel を用いたサーバのセッション管理 \r\n- gRPC によるサーバ情報取得/更新のためのAPI提供\r\n- interface の定義・実装による標準ライブラリ有効活用や実装の隠蔽\r\nについて説明します。\r\n\r\n本セッションの内容を取り込み開発することで、Go らしいネットワークプロトコルやサーバの実装が可能になります！","sessionLevel":"beginner","sessionType":"Challenge Session(20min)","googleCalendarEventCreationLink":"http://www.google.com/calendar/event?action=TEMPLATE&text=ネットワークコントローラ実装で学ぶ、Goクライアントサーバシステムの作り方&details=Goは並行処理を簡単に実現可能な強みを持つため、複数のクライアントと同時並行かつ中央集権的に情報を交換するサーバシステムを、コードの可読性を保ったまま実装することが可能な言語です。我々は、ネットワーク分野でもこの強みを活かすことができないか試行錯誤しています。\r\n\r\nクライアントサーバシステムの例として、ネットワーク機器のパス管理を行うPCEという仕組みがあります。キャリアのように多くのルータで構成される大規模ネットワークにおいてパス管理は重要な要素ですが、誰もが手軽に試験・運用できるPCEはありませんでした。そこで我々は、Goの特性を活かしてPCEをOSSとして実装しました。その結果、誰でも手軽に試験できるようになりました。\r\n\r\n本セッションでは、Go初学者であった我々がネットワークプロトコルやサーバ機能をOSSとして実装する中で理解したことについて、公開済のコードを用いて紹介します。\r\n具体的には、\r\n- goroutine と channel を用いたサーバのセッション管理 \r\n- gRPC によるサーバ情報取得/更新のためのAPI提供\r\n- interface の定義・実装による標準ライブラリ有効活用や実装の隠蔽\r\nについて説明します。\r\n\r\n本セッションの内容を取り込み開発することで、Go らしいネットワークプロトコルやサーバの実装が可能になります！&dates=20230602T171000/20230602T173000","speaker":{"fullName":"Motoki Takenaka","profilePicture":"https://sessionize.com/image/b2d3-400o400o2-Bioy5opi87gWckBu2VzZ3i.JPG","bio":"NTT コミュニケーションズでネットワークの技術検証を行なっています。\r\nOSS のネットワークコントローラである [Pola PCE](https://nttcom.github.io/pola/) を開発しています。\r\n","tagLine":"NTT Communications Corp. ","twitterUserName":null}},"__N_SSG":true}