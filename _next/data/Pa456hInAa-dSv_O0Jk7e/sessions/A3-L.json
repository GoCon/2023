{"pageProps":{"title":"よくわかるThe Go Memory Model - 行間を図解で埋め尽くす","roomName":"Room A","sessionId":"A3-L","description":"[アウトライン]\r\n\r\n- 並行処理の難しさと逐次一貫モデルの破綻\r\n- 観測可能性とhappens-before関係\r\n- Go1.19メモリーモデルとsync/atomicパッケージ\r\n\r\n[セッション紹介文]\r\n\r\nThe Go Memory Modelというドキュメントを知っていますか？これはGo言語で並行処理を行ったときにどのようなことが保証され、または保証されないかを記述したものです。広い意味ではGo言語仕様書の一部ともいえる、基本的で重要なドキュメントです。\r\n\r\nしかし、The Go Memory Modelはごく短いドキュメントであるにも関わらず、Go言語仕様書よりも読解が難しいドキュメントです。それはメモリーモデルという分野のもつ複雑な文脈によります。この分野は複数のプログラム言語に跨って発展してきました。必要な知識のある場所もGoのドキュメントに閉じていません。\r\n\r\nこのような文脈がThe Go Memory Modelの中では説明しきれないため、行間が広くてハイコンテキストな、「わかる人が読めばわかる」ドキュメントになっているのです。\r\n\r\n一方で、The Go Memory Modelの内容はグラフによる図示に非常に適しています。そのため、The Go Memory Modelを読解するには、具体的なプログラムを考え、たくさんの図を描きながら広い行間を埋めていくことが有効です。\r\n\r\nこのセッションでは、そのたくさんの図をお見せしながら、The Go Memory Modelが何を言っているのかを具体的なプログラムに即して解説します。Go1.19でThe Go Memory Modelに追加されたsync/atomicの仕様記述についてもスッキリ理解できるようになるでしょう。\r\n\r\n","sessionLevel":"advanced","sessionType":"Long Talk(40min)","recordingUrl":null,"slideUrl":null,"speaker":{"fullName":"Nobishii","profilePicture":"https://sessionize.com/image/9fb0-400o400o2-nCxiwtjrR1JwsyCWXCjdP3.png","bio":"Software engineer who wants to study programming, software engineering, computer science, math/physics.","tagLine":"未入力","twitterUserName":"shino_nobishii"}},"__N_SSG":true}